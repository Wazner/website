

type Query {
    viewer: Viewer!
    users(searchTerm: String, first: Int!, after: String): UsersConnection
}

type UsersConnection {
    pageInfo: PageInfo
    edges: [UsersEdge]
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String!
    endCursor: String!
}

type UsersEdge {
    node: User
    cursor: String!
}

type Viewer {
    user: User
}

enum UserRole {
    MEMBER
}

type User {
    id: ID!
    name: String!
    email: String!
    role: UserRole!
}

type SuccessLoginResult {
    user: User!
}

enum FailedLoginReason {
    INVALID_CREDENTIALS
}

type FailedLoginResult {
    reason: FailedLoginReason
}

union LoginResult = SuccessLoginResult | FailedLoginResult

type Mutation {
    login(email: String, password: String): LoginResult
    logout: Boolean
}

schema {
    query: Query
    mutation: Mutation
}